name: CI

on:
  push:
    branches-ignore: [deploy]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust-version: ['1.62.0', 'stable']

    steps:
    - name: Checkout workspace
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/pkgcraft-workspace
        submodules: recursive

    - name: Pull submodule updates
      run: git submodule update --recursive --remote

    - name: Remove current repo from workspace
      run: rm -rfv ${{ github.event.repository.name }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: ${{ github.event.repository.name }}

    - name: Set up rust toolchain
      uses: dtolnay/rust-toolchain@master
      id: rust
      with:
        toolchain: ${{ matrix.rust-version }}

    - name: Set up rust cache
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.cachekey }}
        restore-keys: ${{ github.job }}-${{ runner.os }}-rust-

    - name: Various macos set up
      if: runner.os == 'macOS'
      run: |
        # force using clang as a C compiler
        echo "CC=clang" >> $GITHUB_ENV
        echo "CFLAGS=-arch x86_64" >> $GITHUB_ENV
        # install newer bash -- macos defaults to ancient bash due to licensing
        brew install bash

    - name: Build builtins
      run: |
        # first build with default features enabled
        cargo build -p ${{ github.event.repository.name }}
        # then with all features enabled
        cargo build --all-features -p ${{ github.event.repository.name }}
        # export variables required to run tests
        echo "CARGO_BUILD_DIR=${PWD}/target/debug" >> $GITHUB_ENV

    - name: Output bash info
      run: bash --version

    - name: Install bats test framework
      uses: mig4/setup-bats@v1
      with:
        bats-version: 1.7.0

    - name: Run tests
      working-directory: ${{ github.event.repository.name }}
      run: bats -r tests

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout workspace
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/pkgcraft-workspace
        submodules: recursive

    - name: Pull submodule updates
      run: git submodule update --recursive --remote

    - name: Remove current repo from workspace
      run: rm -rfv ${{ github.event.repository.name }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: ${{ github.event.repository.name }}

    - name: Set up rust toolchain
      uses: dtolnay/rust-toolchain@stable
      id: rust
      with:
        components: clippy, rustfmt

    - name: Set up rust cache
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.cachekey }}
        restore-keys: ${{ github.job }}-${{ runner.os }}-rust-

    - name: Run rustfmt
      run: cargo fmt --check -p ${{ github.event.repository.name }}

    - name: Run clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: -p ${{ github.event.repository.name }}
